services:
  
  # MODEL TRAINING SERVICE
  mnist_model_service:
    container_name: ${MODEL_CONTAINER_NAME}
    build:
      context: ./${MODEL_DIR_NAME}
      dockerfile: ${MODEL_DOCKERFILE_NAME}
      args:
        CONTAINER_WORKDIR_NAME: ${CONTAINER_WORKDIR_NAME}
        MODEL_REQUIREMENTS_NAME: ${MODEL_REQUIREMENTS_NAME}
    image: ${MODEL_IMAGE_NAME}:latest
    environment:
      - MNIST_DATASET_IMAGE_SIZE=${MNIST_DATASET_IMAGE_SIZE}
      - MNIST_DATASET_MEAN=${MNIST_DATASET_MEAN}
      - MNIST_DATASET_STD=${MNIST_DATASET_STD}
      - MODEL_BATCH_SIZE=${MODEL_BATCH_SIZE}
      - MODEL_EPOCHS=${MODEL_EPOCHS}
      - MODEL_LEARNING_RATE=${MODEL_LEARNING_RATE}
      - MODEL_MOMENTUM=${MODEL_MOMENTUM}
      - CONTAINER_WORKDIR_NAME=${CONTAINER_WORKDIR_NAME}
      - DATASET_DIR_NAME=${DATASET_DIR_NAME}
      - TRAINED_MODEL_DIR_NAME=${TRAINED_MODEL_DIR_NAME}
      - TRAINED_MODEL_NAME=${TRAINED_MODEL_NAME}
      - MODEL_FILE_NAME=${MODEL_FILE_NAME}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
    volumes:
      - ./${MODEL_DIR_NAME}:/${CONTAINER_WORKDIR_NAME}
      - mnist_trained_model_volume:/${CONTAINER_WORKDIR_NAME}/${TRAINED_MODEL_DIR_NAME}
    networks:
      - ${DOCKER_NETWORK_NAME}
  
  # DATABASE SERVICE
  mnist_database_service:
    container_name: ${DB_CONTAINER_NAME}
    image: ${DB_IMAGE_NAME}:latest
    environment:
      - CONTAINER_WORKDIR_NAME=${CONTAINER_WORKDIR_NAME}
      - DB_DIR_NAME=${DB_DIR_NAME}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - ./${DB_DIR_NAME}:/${CONTAINER_WORKDIR_NAME}
      - ./${DB_DIR_NAME}/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mnist_database_volume:/var/lib/postgresql/data
    networks:
      - ${DOCKER_NETWORK_NAME}

  # WEB SERVER SERVICE
  mnist_webserver_service:
    container_name: ${WEBSERVER_CONTAINER_NAME}
    build:
      context: ./${WEBSERVER_DIR_NAME}
      dockerfile: ${WEBSERVER_DOCKERFILE_NAME}
      args:
        CONTAINER_WORKDIR_NAME: ${CONTAINER_WORKDIR_NAME}
        WEBSERVER_REQUIREMENTS_NAME: ${WEBSERVER_REQUIREMENTS_NAME}
        WEBSERVER_PORT: ${WEBSERVER_PORT}
    image: ${WEBSERVER_IMAGE_NAME}:latest
    ports:
      - "${WEBSERVER_PORT}:${WEBSERVER_PORT}"
    environment:
      - DB_SERVICE_NAME=${DB_SERVICE_NAME}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_TIMEOUT=${DB_TIMEOUT}
      - CONTAINER_WORKDIR_NAME=${CONTAINER_WORKDIR_NAME}
      - TRAINED_MODEL_DIR_NAME=${TRAINED_MODEL_DIR_NAME}
      - TRAINED_MODEL_NAME=${TRAINED_MODEL_NAME}
      - MODEL_FILE_NAME=${MODEL_FILE_NAME}
      - MNIST_DATASET_IMAGE_SIZE=${MNIST_DATASET_IMAGE_SIZE}
      - MNIST_DATASET_MEAN=${MNIST_DATASET_MEAN}
      - MNIST_DATASET_STD=${MNIST_DATASET_STD}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
      - WEBSERVER_PORT=${WEBSERVER_PORT}
    volumes:
      - ./${WEBSERVER_DIR_NAME}:/${CONTAINER_WORKDIR_NAME}
      - mnist_trained_model_volume:/${CONTAINER_WORKDIR_NAME}/${TRAINED_MODEL_DIR_NAME}
    networks:
      - ${DOCKER_NETWORK_NAME}
    depends_on:
      - mnist_database_service

  # WEB APPLICATION SERVICE
  mnist_webapp_service:
    container_name: ${WEBAPP_CONTAINER_NAME}
    build:
      context: ./${WEBAPP_DIR_NAME}
      dockerfile: ${WEBAPP_DOCKERFILE_NAME}
      args:
        WEBAPP_REQUIREMENTS_NAME: ${WEBAPP_REQUIREMENTS_NAME}
    image: ${WEBAPP_IMAGE_NAME}:latest
    ports:
      - "${WEBAPP_PORT}:${WEBAPP_PORT}"
    environment:
      - WEBSERVER_SERVICE_NAME=${WEBSERVER_SERVICE_NAME}
      - WEBSERVER_PORT=${WEBSERVER_PORT}
      - PREDICTION_HISTORY_LIMIT=${PREDICTION_HISTORY_LIMIT}
      - MNIST_DATASET_IMAGE_SIZE=${MNIST_DATASET_IMAGE_SIZE}
      - STREAMLIT_SERVER_HEADLESS=${STREAMLIT_SERVER_HEADLESS}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
    volumes:
      - ./${WEBAPP_DIR_NAME}:/${CONTAINER_WORKDIR_NAME}
    networks:
      - ${DOCKER_NETWORK_NAME}
    depends_on:
      - mnist_webserver_service

# VOLUME CONFIGURATION
volumes:
  mnist_database_volume:
    name: ${DB_VOLUME_NAME}
  mnist_trained_model_volume:
    name: ${TRAINED_MODEL_VOLUME_NAME}

# NETWORK CONFIGURATION
networks:
  mnist_network:
    name: ${DOCKER_NETWORK_NAME}
    
